---
source: src/parser.rs
expression: output
---
[
    Token {
        lexeme: "int",
        typ: KeywordInt,
    },
    Token {
        lexeme: "main",
        typ: Alias,
    },
    Token {
        lexeme: "(",
        typ: PuncLeftParen,
    },
    Token {
        lexeme: ")",
        typ: PuncRightParen,
    },
    Token {
        lexeme: "{",
        typ: PuncLeftBrace,
    },
    Token {
        lexeme: "if",
        typ: KeywordIf,
    },
    Token {
        lexeme: "(",
        typ: PuncLeftParen,
    },
    Token {
        lexeme: "1",
        typ: LiteralInt,
    },
    Token {
        lexeme: ")",
        typ: PuncRightParen,
    },
    Token {
        lexeme: "{",
        typ: PuncLeftBrace,
    },
    Token {
        lexeme: "return",
        typ: KeywordRet,
    },
    Token {
        lexeme: "9",
        typ: LiteralInt,
    },
    Token {
        lexeme: ";",
        typ: PuncSemiColon,
    },
    Token {
        lexeme: "}",
        typ: PuncRightBrace,
    },
    Token {
        lexeme: "else",
        typ: KeywordEls,
    },
    Token {
        lexeme: "{",
        typ: PuncLeftBrace,
    },
    Token {
        lexeme: "return",
        typ: KeywordRet,
    },
    Token {
        lexeme: "10",
        typ: LiteralInt,
    },
    Token {
        lexeme: ";",
        typ: PuncSemiColon,
    },
    Token {
        lexeme: "}",
        typ: PuncRightBrace,
    },
    Token {
        lexeme: "}",
        typ: PuncRightBrace,
    },
]
